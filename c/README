To install:

1) Copy fa.h to /usr/include and libfa.so.1.4.0 to /usr/lib (or put them somewhere else make will find them)
2) Run cmake . in newton/c
3) Run make in newton/c

For the specification of grammars, so the example grammars in newton/c/example grammar for CFG inequality check.
Nonterminals are denoted <NONTERMINAL_IDENTIFIER>, terminals are denoted "terminal_string";
you can put multiple letters into a single pair of "". However, this prototype only supports ASCII alphanumeric
characters, which means it's limited to 62 different terminal symbols (capital letters, small lowercase letters,
numerical digits).

Once the program is compiled, an example call to compare two grammars would be (fom the folder newton/c/src where
the program will be):

./newton --lossyC --refine 2 --file ../example\ grammar\ for\ CFG\ inequality\ check/minijava1.cfg 
     --file2 ../example\ grammar\ for\ CFG\ inequality\ check/minijava2.cfg 

I would advise against refinement depths of greater than 2 for large terminal alphabets since the number of prefixes
becomes too large to be useful very quickly. If n is the number of terminal symbols and b is the refinement depth, then
there are n^b possible prefixes and thus grammars to calculate.
 
With regard to any issues, contact Georg Bachmeier at <bachmeie@in.tum.de>